// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MOD
  USER
}

enum StudentRole {
  ALUMNI
  STUDENT
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  username      String?     @unique
  bio           String      @default("")
  ban_reason    String?
  ban_time      DateTime?
  is_banned     Boolean     @default(false)
  emailVerified DateTime?
  image         String?
  password      String?
  points        Int         @default(0)
  student_role  StudentRole
  major         String?
  role          UserRole    @default(USER)
  accounts      Account[]

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  posts                 Post[]
  comments              Comment[]
  lastLogin             DateTime               @default(now())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  notifications         Notification[]
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  text        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  postId      String   @db.ObjectId
  likedIds    String[] @db.ObjectId
  dislikedIds String[] @db.ObjectId
  parent      Comment? @relation("ChildComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  children Comment[] @relation("ChildComments")
  parentId String?   @db.ObjectId
}

model Flair {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  color String
  Post  Post[]
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  postId    String
  seen      Boolean  @default(false)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  text        String
  userId      String   @db.ObjectId
  likedIds    String[] @db.ObjectId
  dislikedIds String[] @db.ObjectId
  image       String?
  flair       Flair    @relation(fields: [flairName], references: [name])
  isPinned    Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  flairName String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
